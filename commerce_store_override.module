<?php

/**
 * @file
 * Provides per-store overrides of Commerce content.
 */

use Drupal\commerce_store\Entity\StoreInterface;
use Drupal\commerce_store_override\StoreOverride;
use Drupal\commerce_store_override\Form\StoreOverrideForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_type_build().
 */
function commerce_store_override_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  foreach (StoreOverride::SUPPORTED_ENTITY_TYPES as $entity_type_id) {
    $entity_type = &$entity_types[$entity_type_id];
    if (!$entity_type->getFormClass('override')) {
      $entity_type->setFormClass('override', StoreOverrideForm::class);
    }
    if (!$entity_type->hasLinkTemplate('override-form')) {
      $path = $entity_type->getLinkTemplate('edit-form');
      $path = str_replace('/edit', '/override/{commerce_store}', $path);
      $entity_type->setLinkTemplate('override-form', $path);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function commerce_store_override_commerce_store_insert(StoreInterface $store) {
  /** @var \Drupal\Core\Routing\RouteBuilderInterface $route_builder */
  $route_builder = \Drupal::service('router.builder');
  $route_builder->setRebuildNeeded();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function commerce_store_override_commerce_store_update(StoreInterface $store) {
  if ($store->label() != $store->original->label()) {
    /** @var \Drupal\Core\Routing\RouteBuilderInterface $route_builder */
    $route_builder = \Drupal::service('router.builder');
    $route_builder->setRebuildNeeded();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function commerce_store_override_commerce_store_delete(StoreInterface $store) {
  /** @var \Drupal\Core\Routing\RouteBuilderInterface $route_builder */
  $route_builder = \Drupal::service('router.builder');
  $route_builder->setRebuildNeeded();
  /** @var \Drupal\commerce_store_override\StoreOverrideRepositoryInterface $repository */
  $repository = \Drupal::service('commerce_store_override.repository');
  $repository->deleteMultipleByStore($store);
}

/**
 * Implements hook_entity_delete().
 */
function commerce_store_override_entity_delete(EntityInterface $entity) {
  if (in_array($entity->getEntityTypeId(), StoreOverride::SUPPORTED_ENTITY_TYPES)) {
    /** @var \Drupal\commerce_store_override\StoreOverrideRepositoryInterface $repository */
    $repository = \Drupal::service('commerce_store_override.repository');
    $repository->deleteMultipleByEntity($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function commerce_store_override_entity_translation_delete(EntityInterface $translation) {
  if (in_array($translation->getEntityTypeId(), StoreOverride::SUPPORTED_ENTITY_TYPES)) {
    /** @var \Drupal\commerce_store_override\StoreOverrideRepositoryInterface $repository */
    $repository = \Drupal::service('commerce_store_override.repository');
    $repository->deleteMultipleByEntity($translation);
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_store_override_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (!in_array($form_id, ['commerce_product_variation_type_edit_form', 'commerce_product_type_edit_form'])) {
    return;
  }
  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity */
  $bundle_entity = $form_state->getFormObject()->getEntity();
  /** @var \Drupal\commerce_store_override\StoreOverrideManager $store_override_manager */
  $store_override_manager = \Drupal::service('commerce_store_override.manager');
  $store_override_settings = $store_override_manager->getEnabledFieldsOverride($bundle_entity);
  $form['commerce_store_override'] = [
    '#type' => 'details',
    '#title' => t('Store override settings'),
    '#weight' => 6,
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['commerce_store_override']['enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#description' => t('Enable store overrides for this @label.', ['@label' => $bundle_entity->getEntityType()->getSingularLabel()]),
    '#default_value' => !empty($store_override_settings),
  ];
  $form['commerce_store_override']['fields'] = [
    '#type' => 'checkboxes',
    '#title' => t('Fields'),
    '#options' => $store_override_manager->getAllowedFieldsOverride($bundle_entity),
    '#default_value' => !empty($store_override_settings) ? $store_override_settings : [],
    '#states' => [
      'visible' => [
        ':input[name="commerce_store_override[enable]"]' => ['checked' => TRUE],
      ],
    ],
  ];
  $form['actions']['submit']['#submit'][] = 'commerce_store_override_bundle_form_submit';
}

/**
 * Submission handler for commerce_store_override_form_alter().
 */
function commerce_store_override_bundle_form_submit($form, FormStateInterface $form_state) {
  $settings = $form_state->getValue(['commerce_store_override']);
  $settings = !empty($settings['enable']) ? array_filter($settings['fields']) : [];
  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $bundle_entity */
  $bundle_entity = $form_state->getFormObject()->getEntity();
  $bundle_entity->setThirdPartySetting('commerce_store_override', 'fields', $settings);
  $bundle_entity->save();
}
